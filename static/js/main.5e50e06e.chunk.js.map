{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/Error.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","registerServiceWorker.js","index.js"],"names":["SearchBox","props","className","type","placeholder","name","onChange","e","onSearchChange","Card","email","userName","alt","src","CardList","filteredRobots","map","user","key","id","username","Scroll","style","overflowY","border","height","children","Error","state","hasError","error","info","this","setState","Component","Header","console","log","PureComponent","connect","searchField","searchRobots","robots","getRobots","isPending","dispatch","event","payload","target","value","onGetRobots","a","fetch","res","json","data","useEffect","filter","item","toLowerCase","match","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","rootReducer","combineReducers","action","Object","assign","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5e50e06e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SearchBox = (props) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        name=\"searchfield\"\r\n        onChange={(e) => props.onSearchChange(e)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Card = ({ name, email, userName }) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${userName}?200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{userName}</p>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = (props) => {\r\n  return (\r\n    <div>\r\n      {props.filteredRobots.map((user) => (\r\n        <Card\r\n          key={user.id}\r\n          id={user.id}\r\n          name={user.name}\r\n          userName={user.username}\r\n          email={user.email}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"5px solid black\",\r\n        height: \"980px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Error extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n  render() {\r\n    return this.state.hasError ? (\r\n      <h1>Oooops. That is not good!</h1>\r\n    ) : (\r\n      this.props.children\r\n    );\r\n  }\r\n}\r\n\r\nexport default Error;\r\n","import React, { PureComponent } from \"react\";\r\n\r\nclass Header extends PureComponent {\r\n  render() {\r\n    console.log(\"Header\");\r\n    return (\r\n      <div>\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport CardList from \"../components/CardList\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport Error from \"../components/Error\";\r\nimport \"./App.css\";\r\nimport { setSearchField, getRobots } from \"../actions\";\r\nimport Header from \"../components/Header\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.getRobots.robots,\r\n    isPending: state.getRobots.isPending,\r\n    error: state.getRobots.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onGetRobots: () => dispatch(getRobots()),\r\n  };\r\n};\r\n\r\nconst App = (props) => {\r\n  //Get variables from props\r\n  const { searchField, onSearchChange, robots, onGetRobots, isPending } = props;\r\n\r\n  useEffect(() => {\r\n    onGetRobots();\r\n  }, []);\r\n\r\n  const dataFilter = (item) =>\r\n    item.name.toLowerCase().match(searchField.toLowerCase()) && true;\r\n\r\n  const filteredRobots = robots.filter(dataFilter);\r\n\r\n  return isPending ? (\r\n    <h1 className=\"f2\">Loading...</h1>\r\n  ) : (\r\n    <div className=\"tc\">\r\n      <Header className=\"f1\" />\r\n      <SearchBox onSearchChange={onSearchChange} />\r\n      <Scroll>\r\n        <Error>\r\n          <CardList filteredRobots={filteredRobots} />\r\n        </Error>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  LOAD_ROBOTS_FAILED,\r\n  LOAD_ROBOTS_PENDING,\r\n  LOAD_ROBOTS_SUCCESS,\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\n//HOF\r\nexport const getRobots = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: LOAD_ROBOTS_PENDING });\r\n\r\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\r\n    const data = await res.json();\r\n\r\n    dispatch({ type: LOAD_ROBOTS_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: LOAD_ROBOTS_FAILED, payload: error });\r\n  }\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const LOAD_ROBOTS_PENDING = \"LOAD_ROBOTS_PENDING\";\r\nexport const LOAD_ROBOTS_SUCCESS = \"LOAD_ROBOTS_SUCCESS\";\r\nexport const LOAD_ROBOTS_FAILED = \"LOAD_ROBOTS_FAILED\";\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  LOAD_ROBOTS_FAILED,\r\n  LOAD_ROBOTS_PENDING,\r\n  LOAD_ROBOTS_SUCCESS,\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = { searchField: \"\" };\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    // const { search } = payload;\r\n    // return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//getRobots THUNK\r\nconst initialStateRobots = { isPending: false, robots: [], error: \"\" };\r\n\r\nexport const getRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case LOAD_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case LOAD_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case LOAD_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false,\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n//import { createLogger } from \"redux-logger\";\r\nimport thunkMiddleWare from \"redux-thunk\";\r\nimport \"tachyons\";\r\nimport App from \"./containers/App\";\r\nimport { searchRobots, getRobots } from \"./reducers\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\n//The logger helps to identify action while building the app\r\n//const logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, getRobots });\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunkMiddleWare))\r\n); // user (rootReducer) if you have many reducers\r\n\r\n//use the provider to pass the store to all component tree\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}